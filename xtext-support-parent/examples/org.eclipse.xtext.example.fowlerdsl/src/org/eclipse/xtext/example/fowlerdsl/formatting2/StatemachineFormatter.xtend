/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.fowlerdsl.formatting2;

import com.google.inject.Inject
import org.eclipse.xtext.example.fowlerdsl.services.StatemachineGrammarAccess
import org.eclipse.xtext.example.fowlerdsl.statemachine.Command
import org.eclipse.xtext.example.fowlerdsl.statemachine.Event
import org.eclipse.xtext.example.fowlerdsl.statemachine.State
import org.eclipse.xtext.example.fowlerdsl.statemachine.Statemachine
import org.eclipse.xtext.example.fowlerdsl.statemachine.StatemachinePackage
import org.eclipse.xtext.example.fowlerdsl.statemachine.Transition
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class StatemachineFormatter extends AbstractFormatter2 {
	
	@Inject extension StatemachineGrammarAccess

	def dispatch void format(Statemachine statemachine, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Event events : statemachine.getEvents()) {
			format(events, document);
		}
		for (Command commands : statemachine.getCommands()) {
			format(commands, document);
		}
		for (State states : statemachine.getStates()) {
			format(states, document);
		}
	}

	
	def dispatch void format(State state, extension IFormattableDocument document) {
		interior(
			state.regionFor.keyword('state').append[oneSpace],
			state.regionFor.keyword('end'),
			[indent]
		)
		if (state.name !== null) {
			state.regionFor.feature(StatemachinePackage.Literals.STATE__NAME).prepend[oneSpace]
		}
		state.regionFor.keyword('actions').prepend[newLine].append[oneSpace]
		interior(
			state.regionFor.keyword('{').append[newLine],
			state.regionFor.keyword('}').append[newLine],
			[indent]
		)
		state.append[setNewLines(1, 1, 2)]
		for (command : state.actions) {
			command.format
		}
		for (Transition transitions : state.getTransitions()) {
			format(transitions, document);
		}
	}

	def dispatch void format(Transition transition, extension IFormattableDocument document) {
		transition.regionFor.keywords('=>', '(', ')').forEach [
			surround[oneSpace]
		]
		transition.append[setNewLines(1, 1, 2)]
		transition.event.format
	}
	
}
